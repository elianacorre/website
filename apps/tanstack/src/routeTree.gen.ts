/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as SignInSplatRouteImport } from './routes/sign-in.$'
import { Route as AdminParticipantsRouteImport } from './routes/admin/participants'
import { Route as AdminOeuvresRouteImport } from './routes/admin/oeuvres'
import { Route as AdminInscriptionsRouteImport } from './routes/admin/inscriptions'
import { Route as AdminImagesRouteImport } from './routes/admin/images'
import { Route as AdminEvenementsRouteImport } from './routes/admin/evenements'
import { Route as AdminCollectionsRouteImport } from './routes/admin/collections'
import { Route as AdminAteliersRouteImport } from './routes/admin/ateliers'
import { Route as PublicQuiSuisJeRouteImport } from './routes/_public/qui-suis-je'
import { Route as PublicOeuvresRouteImport } from './routes/_public/oeuvres'
import { Route as PublicCoursRouteImport } from './routes/_public/cours'
import { Route as PublicAteliersRouteImport } from './routes/_public/ateliers'
import { Route as PublicOeuvresSetSlugRouteImport } from './routes/_public/oeuvres.$setSlug'

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const SignInSplatRoute = SignInSplatRouteImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminParticipantsRoute = AdminParticipantsRouteImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOeuvresRoute = AdminOeuvresRouteImport.update({
  id: '/oeuvres',
  path: '/oeuvres',
  getParentRoute: () => AdminRoute,
} as any)
const AdminInscriptionsRoute = AdminInscriptionsRouteImport.update({
  id: '/inscriptions',
  path: '/inscriptions',
  getParentRoute: () => AdminRoute,
} as any)
const AdminImagesRoute = AdminImagesRouteImport.update({
  id: '/images',
  path: '/images',
  getParentRoute: () => AdminRoute,
} as any)
const AdminEvenementsRoute = AdminEvenementsRouteImport.update({
  id: '/evenements',
  path: '/evenements',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCollectionsRoute = AdminCollectionsRouteImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAteliersRoute = AdminAteliersRouteImport.update({
  id: '/ateliers',
  path: '/ateliers',
  getParentRoute: () => AdminRoute,
} as any)
const PublicQuiSuisJeRoute = PublicQuiSuisJeRouteImport.update({
  id: '/qui-suis-je',
  path: '/qui-suis-je',
  getParentRoute: () => PublicRoute,
} as any)
const PublicOeuvresRoute = PublicOeuvresRouteImport.update({
  id: '/oeuvres',
  path: '/oeuvres',
  getParentRoute: () => PublicRoute,
} as any)
const PublicCoursRoute = PublicCoursRouteImport.update({
  id: '/cours',
  path: '/cours',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAteliersRoute = PublicAteliersRouteImport.update({
  id: '/ateliers',
  path: '/ateliers',
  getParentRoute: () => PublicRoute,
} as any)
const PublicOeuvresSetSlugRoute = PublicOeuvresSetSlugRouteImport.update({
  id: '/$setSlug',
  path: '/$setSlug',
  getParentRoute: () => PublicOeuvresRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteWithChildren
  '/ateliers': typeof PublicAteliersRoute
  '/cours': typeof PublicCoursRoute
  '/oeuvres': typeof PublicOeuvresRouteWithChildren
  '/qui-suis-je': typeof PublicQuiSuisJeRoute
  '/admin/ateliers': typeof AdminAteliersRoute
  '/admin/collections': typeof AdminCollectionsRoute
  '/admin/evenements': typeof AdminEvenementsRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/inscriptions': typeof AdminInscriptionsRoute
  '/admin/oeuvres': typeof AdminOeuvresRoute
  '/admin/participants': typeof AdminParticipantsRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/': typeof PublicIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/oeuvres/$setSlug': typeof PublicOeuvresSetSlugRoute
}
export interface FileRoutesByTo {
  '/ateliers': typeof PublicAteliersRoute
  '/cours': typeof PublicCoursRoute
  '/oeuvres': typeof PublicOeuvresRouteWithChildren
  '/qui-suis-je': typeof PublicQuiSuisJeRoute
  '/admin/ateliers': typeof AdminAteliersRoute
  '/admin/collections': typeof AdminCollectionsRoute
  '/admin/evenements': typeof AdminEvenementsRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/inscriptions': typeof AdminInscriptionsRoute
  '/admin/oeuvres': typeof AdminOeuvresRoute
  '/admin/participants': typeof AdminParticipantsRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/': typeof PublicIndexRoute
  '/admin': typeof AdminIndexRoute
  '/oeuvres/$setSlug': typeof PublicOeuvresSetSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public': typeof PublicRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/_public/ateliers': typeof PublicAteliersRoute
  '/_public/cours': typeof PublicCoursRoute
  '/_public/oeuvres': typeof PublicOeuvresRouteWithChildren
  '/_public/qui-suis-je': typeof PublicQuiSuisJeRoute
  '/admin/ateliers': typeof AdminAteliersRoute
  '/admin/collections': typeof AdminCollectionsRoute
  '/admin/evenements': typeof AdminEvenementsRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/inscriptions': typeof AdminInscriptionsRoute
  '/admin/oeuvres': typeof AdminOeuvresRoute
  '/admin/participants': typeof AdminParticipantsRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/_public/': typeof PublicIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/_public/oeuvres/$setSlug': typeof PublicOeuvresSetSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/ateliers'
    | '/cours'
    | '/oeuvres'
    | '/qui-suis-je'
    | '/admin/ateliers'
    | '/admin/collections'
    | '/admin/evenements'
    | '/admin/images'
    | '/admin/inscriptions'
    | '/admin/oeuvres'
    | '/admin/participants'
    | '/sign-in/$'
    | '/'
    | '/admin/'
    | '/oeuvres/$setSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/ateliers'
    | '/cours'
    | '/oeuvres'
    | '/qui-suis-je'
    | '/admin/ateliers'
    | '/admin/collections'
    | '/admin/evenements'
    | '/admin/images'
    | '/admin/inscriptions'
    | '/admin/oeuvres'
    | '/admin/participants'
    | '/sign-in/$'
    | '/'
    | '/admin'
    | '/oeuvres/$setSlug'
  id:
    | '__root__'
    | '/_public'
    | '/admin'
    | '/_public/ateliers'
    | '/_public/cours'
    | '/_public/oeuvres'
    | '/_public/qui-suis-je'
    | '/admin/ateliers'
    | '/admin/collections'
    | '/admin/evenements'
    | '/admin/images'
    | '/admin/inscriptions'
    | '/admin/oeuvres'
    | '/admin/participants'
    | '/sign-in/$'
    | '/_public/'
    | '/admin/'
    | '/_public/oeuvres/$setSlug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  SignInSplatRoute: typeof SignInSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/participants': {
      id: '/admin/participants'
      path: '/participants'
      fullPath: '/admin/participants'
      preLoaderRoute: typeof AdminParticipantsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/oeuvres': {
      id: '/admin/oeuvres'
      path: '/oeuvres'
      fullPath: '/admin/oeuvres'
      preLoaderRoute: typeof AdminOeuvresRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/inscriptions': {
      id: '/admin/inscriptions'
      path: '/inscriptions'
      fullPath: '/admin/inscriptions'
      preLoaderRoute: typeof AdminInscriptionsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/images': {
      id: '/admin/images'
      path: '/images'
      fullPath: '/admin/images'
      preLoaderRoute: typeof AdminImagesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/evenements': {
      id: '/admin/evenements'
      path: '/evenements'
      fullPath: '/admin/evenements'
      preLoaderRoute: typeof AdminEvenementsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/collections': {
      id: '/admin/collections'
      path: '/collections'
      fullPath: '/admin/collections'
      preLoaderRoute: typeof AdminCollectionsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/ateliers': {
      id: '/admin/ateliers'
      path: '/ateliers'
      fullPath: '/admin/ateliers'
      preLoaderRoute: typeof AdminAteliersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/qui-suis-je': {
      id: '/_public/qui-suis-je'
      path: '/qui-suis-je'
      fullPath: '/qui-suis-je'
      preLoaderRoute: typeof PublicQuiSuisJeRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/oeuvres': {
      id: '/_public/oeuvres'
      path: '/oeuvres'
      fullPath: '/oeuvres'
      preLoaderRoute: typeof PublicOeuvresRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/cours': {
      id: '/_public/cours'
      path: '/cours'
      fullPath: '/cours'
      preLoaderRoute: typeof PublicCoursRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/ateliers': {
      id: '/_public/ateliers'
      path: '/ateliers'
      fullPath: '/ateliers'
      preLoaderRoute: typeof PublicAteliersRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/oeuvres/$setSlug': {
      id: '/_public/oeuvres/$setSlug'
      path: '/$setSlug'
      fullPath: '/oeuvres/$setSlug'
      preLoaderRoute: typeof PublicOeuvresSetSlugRouteImport
      parentRoute: typeof PublicOeuvresRoute
    }
  }
}

interface PublicOeuvresRouteChildren {
  PublicOeuvresSetSlugRoute: typeof PublicOeuvresSetSlugRoute
}

const PublicOeuvresRouteChildren: PublicOeuvresRouteChildren = {
  PublicOeuvresSetSlugRoute: PublicOeuvresSetSlugRoute,
}

const PublicOeuvresRouteWithChildren = PublicOeuvresRoute._addFileChildren(
  PublicOeuvresRouteChildren,
)

interface PublicRouteChildren {
  PublicAteliersRoute: typeof PublicAteliersRoute
  PublicCoursRoute: typeof PublicCoursRoute
  PublicOeuvresRoute: typeof PublicOeuvresRouteWithChildren
  PublicQuiSuisJeRoute: typeof PublicQuiSuisJeRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAteliersRoute: PublicAteliersRoute,
  PublicCoursRoute: PublicCoursRoute,
  PublicOeuvresRoute: PublicOeuvresRouteWithChildren,
  PublicQuiSuisJeRoute: PublicQuiSuisJeRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

interface AdminRouteChildren {
  AdminAteliersRoute: typeof AdminAteliersRoute
  AdminCollectionsRoute: typeof AdminCollectionsRoute
  AdminEvenementsRoute: typeof AdminEvenementsRoute
  AdminImagesRoute: typeof AdminImagesRoute
  AdminInscriptionsRoute: typeof AdminInscriptionsRoute
  AdminOeuvresRoute: typeof AdminOeuvresRoute
  AdminParticipantsRoute: typeof AdminParticipantsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAteliersRoute: AdminAteliersRoute,
  AdminCollectionsRoute: AdminCollectionsRoute,
  AdminEvenementsRoute: AdminEvenementsRoute,
  AdminImagesRoute: AdminImagesRoute,
  AdminInscriptionsRoute: AdminInscriptionsRoute,
  AdminOeuvresRoute: AdminOeuvresRoute,
  AdminParticipantsRoute: AdminParticipantsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  SignInSplatRoute: SignInSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
